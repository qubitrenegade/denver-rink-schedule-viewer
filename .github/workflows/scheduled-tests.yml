name: Scheduled Tests

on:
  schedule:
    # Run daily at 0:00 AM UTC
    - cron: '0 0 * * *'
  workflow_dispatch:  # Allow manual trigger

jobs:
  scraper-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: 1.2.18  # Pin to specific version for consistency

    - name: Setup environment
      run: |
        # Set environment variables that may help with sharp installation
        echo "SHARP_IGNORE_GLOBAL_LIBVIPS=1" >> $GITHUB_ENV
        echo "SHARP_LIBVIPS_FORCE_GLOBAL=false" >> $GITHUB_ENV

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          **/node_modules
          ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Install dependencies
      run: |
        # Address potential sharp/semver timing issue in CI environment
        # by ensuring semver is available before sharp's post-install script runs
        echo "üîß Installing dependencies with enhanced timing robustness..."
        
        # Clear any existing node_modules to ensure clean install
        rm -rf node_modules
        
        # Install with retry mechanism to handle transient issues
        for attempt in 1 2 3; do
          echo "Installation attempt $attempt..."
          if bun install --frozen-lockfile; then
            echo "‚úÖ Dependencies installed successfully"
            break
          else
            echo "‚ö†Ô∏è Installation attempt $attempt failed, retrying..."
            rm -rf node_modules
            sleep 2
          fi
          
          if [ $attempt -eq 3 ]; then
            echo "‚ùå All installation attempts failed"
            exit 1
          fi
        done

    - name: Test scrapers
      run: |
        echo "üîç Testing all scrapers to detect website changes..."
        
        # Test each scraper individually (only if test file exists)
        [ -f workers/scrapers/apex-ice.test.ts ] && bun test workers/scrapers/apex-ice.test.ts --run
        [ -f workers/scrapers/big-bear.test.ts ] && bun test workers/scrapers/big-bear.test.ts --run || true
        [ -f workers/scrapers/du-ritchie.test.ts ] && bun test workers/scrapers/du-ritchie.test.ts --run || true
        [ -f workers/scrapers/foothills-edge.test.ts ] && bun test workers/scrapers/foothills-edge.test.ts --run || true
        [ -f workers/scrapers/ice-ranch.test.ts ] && bun test workers/scrapers/ice-ranch.test.ts --run || true
        [ -f workers/scrapers/ssprd.test.ts ] && bun test workers/scrapers/ssprd.test.ts --run || true
        
        echo "‚úÖ Scraper tests completed"

    - name: Notify if tests failed
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const issueTitle = 'Scheduled Scraper Tests Failed';
          const issueBody = 'The daily scraper tests have failed. This may indicate that one or more rink websites have changed their structure.\n\nSee the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
          
          // Check if issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['scraper-failure']
          });
          
          // Only create a new issue if one doesn't already exist
          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['scraper-failure', 'automated']
            });
          }
